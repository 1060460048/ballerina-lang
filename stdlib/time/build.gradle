/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

//apply from: "$rootDir/gradle/balNativeLibProject.gradle"
//apply from: "$rootDir/gradle/baseNativeStdLibProject.gradle"
apply from: "$rootDir/gradle/ballerinaModuleToPackage.gradle"
apply from: "$rootDir/gradle/ballerinaLangLibBuild.gradle"

configurations.testCompileClasspath {
    resolutionStrategy {
        preferProjectModules()
    }
}

dependencies {
    // baloImplementation project(path: ':ballerina-runtime-api', configuration: 'baloImplementation')


    baloCreat project(':lib-creator')
    implementation project(':ballerina-lang')
    implementation project(':ballerina-runtime')
    implementation project(':ballerina-logging')
    implementation project(':ballerina-runtime-api')
    testCompile 'org.testng:testng'
    testCompile 'org.slf4j:slf4j-jdk14'
    testCompile project(':ballerina-test-utils')
    testCompile project(':ballerina-reflect')
    testCompile project(':ballerina-core')
    testCompile project(':ballerina-file')

    distributionBalo project(path: ':ballerina-lang:annotations', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:annotations', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:java', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:java', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:internal', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:internal', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:array', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:array', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:decimal', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:decimal', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:error', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:error', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:floatingpoint', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:floatingpoint', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:future', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:future', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:integer', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:integer', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:map', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:map', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:object', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:object', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:stream', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:stream', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:table', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:table', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:string', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:string', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:typedesc', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:typedesc', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:value', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:value', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:xml', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:xml', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:bool', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:bool', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang-test', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang-test', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:query', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:query', configuration: 'distributionBirJar')
    distributionBalo project(path: ':ballerina-lang:transaction', configuration: 'distributionBalo')
    testRuntime project(path: ':ballerina-lang:transaction', configuration: 'distributionBirJar')
}

description = 'Ballerina - Time'

configurations {
    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testCompile.exclude group: 'org.slf4j', module: 'slf4j-simple'
    testCompile.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
}

configurations.all {
    resolutionStrategy.preferProjectModules()
}

ballerinaLangLibBuild {
    skipBootstrap = 'true'
    minHeapSize = "512m"
    maxHeapSize = "2048m"
}

//ext.moduleName = 'time'
//
//compileJava {
//    inputs.property("moduleName", moduleName)
//    doFirst {
//        options.compilerArgs = [
//                '--module-path', classpath.asPath,
//        ]
//        classpath = files()
//    }
//}
