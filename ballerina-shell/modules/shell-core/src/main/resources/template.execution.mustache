{{#imports }}
    {{{.}}}
{{/imports}}

// Java methods: Memory
function java_recall(handle context_id, handle name) returns any|error = @java:Method {
    name: "recall",
    'class: "{{{memoryRef}}}"
} external;
function java_memorize(handle context_id, handle name, any|error value) = @java:Method {
    name: "memorize",
    'class: "{{{memoryRef}}}"
} external;
function recall_any(string name) returns any {
    return checkpanic java_recall(java:fromString("{{contextId}}"), java:fromString(name));
}
function recall_any_error(string name) returns any|error {
    return java_recall(java:fromString("{{contextId}}"), java:fromString(name));
}
function memorize(string name, any|error value) {
    java_memorize(java:fromString("{{contextId}}"), java:fromString(name), value);
}

// Module level declarations
{{#moduleDclns }}
    {{{.}}}
{{/moduleDclns}}

// Variable declarations
{{#varDclns}}
    {{^isNew }}
        {{#isAny }}
            {{{prefix}}} {{{type}}} {{{name}}} = <{{{type}}}> recall_any("{{{encodedName}}}");
        {{/isAny}}
        {{^isAny }}
            {{{prefix}}} {{{type}}} {{{name}}} = <{{{type}}}> recall_any_error("{{{encodedName}}}");
        {{/isAny}}
    {{/isNew}}
{{/varDclns}}
{{{lastVarDcln}}}

// Global expression variable (previous evaluation value)
any|error {{{exprVarName}}} = recall_any_error("{{{exprVarName}}}");

// Handle statements/expressions
// We put statements separately to trap any panics
function stmts() returns any {
    {{#lastStmt}}
        do {
            // Statement evaluation
            {{#statement}}
                if (true) {
                    {{{code}}}
                }
                {{{exprVarName}}} = ();
            {{/statement}}

            // Expression evaluation
            {{^statement}}
                {{{exprVarName}}} = (
                    {{{code}}}
                );
            {{/statement}}
        } on fail error e {
            {{{exprVarName}}} = ();
            return e.message();
        }
    {{/lastStmt}}
}

// This will execute the statement and initialize and save vars.
function run() returns any {
    any|error retValue = trap stmts();
    memorize("{{{exprVarName}}}", {{{exprVarName}}});
    {{#varDclns}}
        memorize("{{{encodedName}}}", {{{name}}});
    {{/varDclns}}
    return checkpanic retValue;
}

public function main() {
}
